---
# Clang-Format Configuration
# Based on analysis of actual codebase patterns

Language: Cpp
Standard: Latest

# Base configuration
BasedOnStyle: LLVM

# Column limit
ColumnLimit: 120

# Indentation
IndentWidth: 4
TabWidth: 4
UseTab: Never
ContinuationIndentWidth: 4
IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: true
IndentPPDirectives: BeforeHash
IndentExternBlock: AfterExternBlock
IndentWrappedFunctionNames: false
NamespaceIndentation: All
IndentAccessModifiers: false
AccessModifierOffset: -4
ConstructorInitializerIndentWidth: 4
IndentRequiresClause: true

# Brace wrapping (K&R/Attach style)
BreakBeforeBraces: Attach
BraceWrapping:
  AfterCaseLabel: false
  AfterClass: false
  AfterControlStatement: Never
  AfterEnum: false
  AfterFunction: false
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

# Alignment
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Left
AlignConsecutiveAssignments:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
  AlignCompound: true
  AlignFunctionPointers: true
  PadOperators: true
AlignConsecutiveBitFields:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
AlignConsecutiveDeclarations:
  Enabled: false
AlignConsecutiveMacros:
  Enabled: false
AlignEscapedNewlines: Right
AlignOperands: Align
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0

# Multi-line alignment
BinPackArguments: false
BinPackParameters: false
PackConstructorInitializers: Never

# Allow short statements on single line
AllowShortBlocksOnASingleLine: Empty
AllowShortCaseLabelsOnASingleLine: false
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: false
AllowAllArgumentsOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true

# Line breaking
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
BreakAfterAttributes: Never
BreakAfterJavaFieldAnnotations: false
BreakBeforeBinaryOperators: None
BreakBeforeConceptDeclarations: Always
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakInheritanceList: BeforeColon
BreakStringLiterals: true

# Keep existing line breaks
KeepEmptyLinesAtTheStartOfBlocks: false
KeepEmptyLinesAtEOF: false
MaxEmptyLinesToKeep: 2

# Member initializer lists
AllowAllConstructorInitializersOnNextLine: true
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# Spaces in declarations
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros: true
  AfterOverloadedOperator: false
  AfterPlacementOperator: true
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: Never
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParens: Never
SpacesInParensOptions:
  InConditionalStatements: false
  InCStyleCasts: false
  InEmptyParentheses: false
  Other: false
SpacesInSquareBrackets: false

# Pointer and reference alignment
PointerAlignment: Left
ReferenceAlignment: Pointer
DerivePointerAlignment: false

# Other spacing
BitFieldColonSpacing: Both

# Comments
CommentPragmas: '^ IWYU pragma:'
FixNamespaceComments: true

# Include directives
SortIncludes: CaseSensitive
IncludeBlocks: Regroup

IncludeCategories:
  # Priority 1: Standard library headers (C++ standard library)
  - Regex: '^<[^.]*>$'
    Priority: 1
    SortPriority: 1
    CaseSensitive: false

  # Priority 2: System/library headers ending with .hpp in angle brackets
  - Regex: '^<.*\.hpp>$'
    Priority: 2
    SortPriority: 2
    CaseSensitive: false

  # Priority 3: Project headers ending with .hpp in quotes
  - Regex: '^".*\.hpp"$'
    Priority: 3
    SortPriority: 3
    CaseSensitive: false

  # Priority 4: Everything else
  - Regex: '.*'
    Priority: 4
    SortPriority: 4
    CaseSensitive: false

IncludeIsMainRegex: '([-_](test|unittest))?$'
IncludeIsMainSourceRegex: ''

# Line endings
InsertNewlineAtEOF: true
InsertTrailingCommas: None
RemoveParentheses: Leave
RemoveSemicolon: false

# Qualifiers
QualifierAlignment: Leave

# Empty line control
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
SeparateDefinitionBlocks: Leave

# Lambda formatting
LambdaBodyIndentation: Signature

# Requires clause positioning
RequiresClausePosition: OwnLine
RequiresExpressionIndentation: OuterScope

# Cpp11 braced lists
Cpp11BracedListStyle: true

# Integer literal separator
IntegerLiteralSeparator:
  Binary: 0
  BinaryMinDigits: 0
  Decimal: 0
  DecimalMinDigits: 0
  Hex: 0
  HexMinDigits: 0

# Penalties (for line breaking decisions)
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 60

# Short namespace lines
ShortNamespaceLines: 1

# Sorting
SortUsingDeclarations: LexicographicNumeric

# Macro definitions
AttributeMacros:
  - __capability
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IfMacros:
  - KJ_IF_MAYBE
MacroBlockBegin: ''
MacroBlockEnd: ''
StatementAttributeLikeMacros:
  - Q_EMIT
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
TypenameMacros:
  - STACK_OF
  - LIST
WhitespaceSensitiveMacros:
  - BOOST_PP_STRINGIZE
  - CF_SWIFT_NAME
  - NS_SWIFT_NAME
  - PP_STRINGIZE
  - STRINGIZE